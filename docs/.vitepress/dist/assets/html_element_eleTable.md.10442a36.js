import{_ as t,o as d,c as e,N as o}from"./chunks/framework.72c3014c.js";const p=JSON.parse('{"title":"表格","description":"","frontmatter":{},"headers":[],"relativePath":"html/element/eleTable.md"}'),c={name:"html/element/eleTable.md"},r=o('<h1 id="表格" tabindex="-1">表格 <a class="header-anchor" href="#表格" aria-label="Permalink to &quot;表格&quot;">​</a></h1><h2 id="table-标签介绍" tabindex="-1">Table 标签介绍 <a class="header-anchor" href="#table-标签介绍" aria-label="Permalink to &quot;Table 标签介绍&quot;">​</a></h2><p><code>&lt;table&gt;</code> 标签用于定义 HTML 表格。通过使用表格标签，可以更容易地在网页上排列和显示数据。</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>border</code></td><td>是否显示边框，可以是任意 CSS 颜色值。默认值是 <code>&quot;1&quot;</code>，表示显示边框。</td></tr><tr><td><code>cellpadding</code></td><td>指定单元格的内边距大小，可以是任意 CSS 单位。</td></tr><tr><td><code>cellspacing</code></td><td>指定单元格的间距大小，可以是任意 CSS 单位。</td></tr><tr><td><code>width</code></td><td>指定表格宽度，可以是任意 CSS 单位，如像素（<code>px</code>）或百分比（<code>%</code>）。</td></tr><tr><td><code>height</code></td><td>指定表格高度，可以是任意 CSS 单位。</td></tr><tr><td><code>background-color</code></td><td>指定表格背景色，可以是任意 CSS 颜色值。</td></tr><tr><td><code>caption</code></td><td>用于指定表格标题，只能放在 <code>table</code> 标签内部，且只能有一个。</td></tr><tr><td><code>thead</code></td><td>用于定义表格的头部，只能放在 <code>table</code> 标签内部，且只能有一个。</td></tr><tr><td><code>tbody</code></td><td>用于定义表格的主体，只能放在 <code>table</code> 标签内部，且可以有多个。</td></tr><tr><td><code>tfoot</code></td><td>用于定义表格的底部，只能放在 <code>table</code> 标签内部，且只能有一个。</td></tr><tr><td><code>rowspan</code></td><td>指定单元格横向跨越的行数。</td></tr><tr><td><code>colspan</code></td><td>指定单元格纵向跨越的列数。</td></tr><tr><td><code>scope</code></td><td>指定表头单元格所代表的数据列或行的范围，可以是 <code>row</code> 或 <code>col</code>。</td></tr><tr><td><code>abbr</code></td><td>指定单元格的缩写。</td></tr><tr><td><code>align</code></td><td>指定单元格的水平对齐方式，可以是 <code>left</code>、<code>right</code>、<code>center</code> 或 <code>justify</code>。</td></tr><tr><td><code>valign</code></td><td>指定单元格的垂直对齐方式，可以是 <code>top</code>、<code>bottom</code>、<code>middle</code> 或 <code>baseline</code>。</td></tr><tr><td><code>nowrap</code></td><td>是否强制单元格中的文本在一行内显示。</td></tr><tr><td><code>bgcolor</code></td><td>指定单元格的背景颜色，可以是任意 CSS 颜色值。</td></tr><tr><td><code>width</code></td><td>指定单元格宽度，可以是任意 CSS 单位，如像素（<code>px</code>）或百分比（<code>%</code>）。</td></tr><tr><td><code>height</code></td><td>指定单元格高度，可以是任意 CSS 单位。</td></tr><tr><td><code>style</code></td><td>指定单元格的 CSS 样式，如 <code>&quot;font-size: 14px; color: #333;&quot;</code>。</td></tr></tbody></table><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><table><thead><tr><th>编号</th><th>姓名</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>男</td><td>20</td></tr><tr><td>2</td><td>李四</td><td>女</td><td>22</td></tr></tbody></table><h2 id="子元素" tabindex="-1">子元素 <a class="header-anchor" href="#子元素" aria-label="Permalink to &quot;子元素&quot;">​</a></h2><h3 id="tr-td-和-th" tabindex="-1">tr td 和 th <a class="header-anchor" href="#tr-td-和-th" aria-label="Permalink to &quot;tr td 和 th&quot;">​</a></h3><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>规定单元格内容的水平对齐方式（已废弃）</td></tr><tr><td>bgcolor</td><td>规定单元格的背景颜色</td></tr><tr><td>valign</td><td>规定单元格内容的垂直对齐方式</td></tr><tr><td>height</td><td>规定单元格的高度</td></tr><tr><td>width</td><td>规定单元格的宽度</td></tr></tbody></table>',10),a=[r];function l(h,i,n,b,s,_){return d(),e("div",null,a)}const u=t(c,[["render",l]]);export{p as __pageData,u as default};
