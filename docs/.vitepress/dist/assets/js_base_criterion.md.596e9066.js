import{_ as a,o as s,c as e,N as o}from"./chunks/framework.72c3014c.js";const m=JSON.parse('{"title":"书写","description":"","frontmatter":{},"headers":[],"relativePath":"js/base/criterion.md"}'),n={name:"js/base/criterion.md"},p=o(`<h1 id="书写" tabindex="-1">书写 <a class="header-anchor" href="#书写" aria-label="Permalink to &quot;书写&quot;">​</a></h1><h2 id="认识注释" tabindex="-1">认识注释 <a class="header-anchor" href="#认识注释" aria-label="Permalink to &quot;认识注释&quot;">​</a></h2><p>注释：提供给代码阅读者使用，不会参与执行</p><ul><li>单行注释 <strong>//</strong></li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 单行注释</span></span>
<span class="line"></span></code></pre></div><ul><li>多行注释 <strong>/* */</strong></li></ul><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 多</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   注</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   释</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">***/</span></span>
<span class="line"></span></code></pre></div><h2 id="书写规范" tabindex="-1">书写规范 <a class="header-anchor" href="#书写规范" aria-label="Permalink to &quot;书写规范&quot;">​</a></h2><blockquote><p>JavaScript 的书写规范包括语言规范和代码风格两个方面。</p></blockquote><h2 id="语言规范" tabindex="-1">语言规范 <a class="header-anchor" href="#语言规范" aria-label="Permalink to &quot;语言规范&quot;">​</a></h2><p><span class="cor-tip">推荐</span> 严格模式 &quot;use strict&quot;</p><p><span class="cor-da">避免</span> 将 <code>JavaScript</code> 嵌入到 <code>HTML</code> 中, <span class="cor-tip">推荐</span> 将 <code>JavaScript</code> 代码放在外部文件中，</p><p><span class="cor-da">避免</span> 使用 <code>全局变量</code> , <span class="cor-tip">推荐</span> 使用 <em>var, let 或 const</em> 关键字声明变量，</p><p><span class="cor-da">避免</span> 使用 <code>eval()</code> 方法</p><p><span class="cor-da">避免</span> 在 <code>循环中创建新对象</code></p><p><span class="cor-da">避免</span> 使用 <code>with</code> 语句</p><p><span class="cor-da">避免</span> <code>== 和 !=</code> <span class="cor-tip">推荐</span> 使用 <em>=== 和 !==</em></p><p><span class="cor-da">避免</span> <code>在条件语句中进行赋值</code>操作</p><p><span class="cor-da">避免</span> 使用 <code>不必要的分号</code>。</p><h2 id="代码风格" tabindex="-1">代码风格 <a class="header-anchor" href="#代码风格" aria-label="Permalink to &quot;代码风格&quot;">​</a></h2><p><span class="cor-tip">推荐</span> 使用 <code>驼峰命名法</code> 来命名 <em>变量、函数、对象</em> 等</p><p>使用一个 <strong>Tab</strong> 缩进代码，而不是<strong>空格</strong></p><p>将<strong>左大括号</strong>放在代码块的 <em>同一行</em>，<span class="cor-da">而不是</span> <em>新开一行</em></p><p>使用<code>单引号</code>或<code>双引号</code>来表示字符串，<strong>保持一致性</strong></p><p>将<code>逗号</code>放在行末，而不是行首</p><p>使用<strong>分号</strong>来<strong>结束语句</strong></p><p>对于条件语句和循环语句，使用<strong>花括号</strong>来明确代码块的 <em>开始和结束</em></p><p><span class="cor-da">避免</span> 行尾空格</p><p><span class="cor-tip">尽可能</span> 注释代码，让其易于<strong>阅读和理解</strong>。</p><blockquote><p>以上是一些常用的 JavaScript 书写规范，可以帮助开发者编写出更加规范、易于维护的代码。</p></blockquote>`,30),t=[p];function c(l,r,i,d,h,u){return s(),e("div",null,t)}const _=a(n,[["render",c]]);export{m as __pageData,_ as default};
